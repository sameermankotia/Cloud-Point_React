{"version":3,"file":"static/js/926.1c1e8aa6.chunk.js","mappings":"mRAmDA,UA3C+B,WAC7B,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAAC,EAAAC,SAAQ,CAACC,UAAU,SAAC,IAAO,IAAI,UAC9B,SAAC,KAAK,CAACC,QAASN,EAAQ,SACrB,SAACA,GACA,MAAwDA,EAAQO,KAAxDC,EAAK,EAALA,MAAOC,EAAW,EAAXA,YAAaC,EAAM,EAANA,OAAQC,EAAe,EAAfA,gBAC5BC,EAASZ,EAATY,KAGOC,EAGXH,EAHFI,YACMC,EAEJL,EAFFM,KACgBC,EACdP,EADFQ,eAIoBC,EAElBV,EAFFW,mBACmBC,EACjBZ,EADFa,kBAKF,OAFApB,EAASqB,EAAAA,EAAAA,OAA4BX,KAGnC,SAAC,IAAI,CACHJ,MAAOA,EACPgB,MAAO,CAAEL,iBAAAA,EAAkBE,eAAAA,GAC3BV,gBAAiBA,EACjBD,OAAQ,CACNG,mBAAAA,EACAE,YAAAA,EACAE,mBAAAA,GAEFQ,UAAU,GAGhB,KAIR,EAKA,IAAMC,EAAkB,yCAAG,WAAOC,GAAM,sFAGN,OAFxBC,EAAuBD,EAAvBC,mBAAkB,EAEU,CAClCC,OAAOD,EAAmBE,MAAM,KAAKC,GAAG,GAAGD,MAAM,KAAKC,GAAG,IACzDF,OAAOD,EAAmBE,MAAM,KAAKC,GAAG,GAAGD,MAAM,KAAKC,GAAG,IACzDH,EAAmBE,MAAM,KAAKC,GAAG,GAAGD,MAAM,KAAKC,GAAG,IAH7CC,EAAQ,KAAEC,EAAS,KAAErB,EAAI,eAMbsB,EAAAA,EAAAA,GAAU,mDAAD,OACyBF,EAAQ,sBAAcC,EAAS,+UAClF,KAAD,EAFS,OAAJ1B,EAAI,yBAIH,CAAEA,KAAAA,EAAMK,KAAAA,IAAM,2CACtB,gBAduB,sCAiBXuB,EAAS,SAAH,OAAMR,EAAM,EAANA,OAAM,OAC7BS,EAAAA,EAAAA,IAAM,CAAEpC,QAAS0B,EAAmBC,IAAW,C","sources":["pages/SearchedCityDetail.jsx"],"sourcesContent":["import { Suspense } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Await, defer, useLoaderData } from \"react-router-dom\";\nimport { locationSliceActions } from \"../store/location/location-slice\";\nimport Spinner from \"../components/Spinner\";\nimport Root from \"../components/Root\";\nimport fetchData from \"../utils/fetchData\";\n\nconst SearchedCityDetailPage = () => {\n  const { weather } = useLoaderData();\n  const dispatch = useDispatch();\n\n  return (\n    <Suspense fallback={<Spinner />}>\n      <Await resolve={weather}>\n        {(weather) => {\n          const { daily, daily_units, hourly, current_weather } = weather.data;\n          const { city } = weather;\n\n          const {\n            weathercode: hourlyWeatherCodes,\n            time: hourlyTimes,\n            temperature_2m: hourlyTemperatures,\n          } = hourly;\n\n          const {\n            temperature_2m_max: temperature_unit,\n            windspeed_10m_max: windspeed_unit,\n          } = daily_units;\n\n          dispatch(locationSliceActions.locate(city));\n\n          return (\n            <Root\n              daily={daily}\n              units={{ temperature_unit, windspeed_unit }}\n              current_weather={current_weather}\n              hourly={{\n                hourlyWeatherCodes,\n                hourlyTimes,\n                hourlyTemperatures,\n              }}\n              searched={true}\n            />\n          );\n        }}\n      </Await>\n    </Suspense>\n  );\n};\n\nexport default SearchedCityDetailPage;\n\n// * React-Router loader function\nconst searchedCityLoader = async (params) => {\n  const { searchedCityDetail } = params;\n\n  const [latitude, longitude, city] = [\n    Number(searchedCityDetail.split(\"&\").at(2).split(\"=\").at(1)),\n    Number(searchedCityDetail.split(\"&\").at(3).split(\"=\").at(1)),\n    searchedCityDetail.split(\"&\").at(1).split(\"=\").at(1),\n  ];\n\n  const data = await fetchData(\n    `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&hourly=temperature_2m,apparent_temperature,precipitation,rain,showers,snowfall,snow_depth,weathercode,windspeed_10m&daily=weathercode,temperature_2m_max,temperature_2m_min,sunrise,sunset,precipitation_sum,rain_sum,showers_sum,snowfall_sum,precipitation_hours,windspeed_10m_max,windspeed_10m_min&current_weather=true&timezone=auto`\n  );\n\n  return { data, city };\n};\n\n// * Deferring the loader function for asynchronous rendering\nexport const loader = ({ params }) =>\n  defer({ weather: searchedCityLoader(params) });\n"],"names":["weather","useLoaderData","dispatch","useDispatch","Suspense","fallback","resolve","data","daily","daily_units","hourly","current_weather","city","hourlyWeatherCodes","weathercode","hourlyTimes","time","hourlyTemperatures","temperature_2m","temperature_unit","temperature_2m_max","windspeed_unit","windspeed_10m_max","locationSliceActions","units","searched","searchedCityLoader","params","searchedCityDetail","Number","split","at","latitude","longitude","fetchData","loader","defer"],"sourceRoot":""}